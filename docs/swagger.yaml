definitions:
  api.createCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  api.createUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  api.loginUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  api.loginUserResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
      refresh_token:
        type: string
      refresh_token_expires_at:
        type: string
      session_id:
        type: string
      user:
        type: string
      user_id:
        type: string
    type: object
  api.updateCategoryRequestData:
    properties:
      name:
        type: string
    type: object
  api.updateUserRequestData:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  api.userResponse:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  db.Category:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  db.ListUsersRow:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  db.Tag:
    properties:
      created_at:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  db.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: Recive all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Category'
      summary: List Categories
      tags:
      - category
      - list
  /category:
    post:
      consumes:
      - application/json
      description: Create a new Category
      parameters:
      - description: Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/api.createCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Category'
      security:
      - JWT: []
      summary: Create a new Category
      tags:
      - category
      - create
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the category register
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - JWT: []
      summary: Delete Category
      tags:
      - category
      - delete
    get:
      consumes:
      - application/json
      description: Recive the one category information from a id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Category'
      summary: Get a Category
      tags:
      - category
      - get
    put:
      consumes:
      - application/json
      description: Update the category information
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/api.updateCategoryRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Category'
      security:
      - JWT: []
      summary: Update Category
      tags:
      - category
      - update
  /login:
    post:
      consumes:
      - application/json
      description: Login a user and return access token a refresh token
      parameters:
      - description: User Login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.loginUserResponse'
      summary: Login User
      tags:
      - user
      - login
  /tag:
    post:
      consumes:
      - multipart/form-data
      description: Create a new Tag, the image are upload to S3 services
      parameters:
      - description: This is the tag name
        in: formData
        name: name
        required: true
        type: string
      - description: This is a image
        in: formData
        name: logo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Tag'
      security:
      - JWT: []
      summary: Create a new Tag
      tags:
      - tag
      - create
  /tag/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the tag register
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - JWT: []
      summary: Delete Tag
      tags:
      - tag
      - delete
    get:
      consumes:
      - application/json
      description: Recive the one tag information from a id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Tag'
      summary: Get a Tag
      tags:
      - tag
      - get
  /tags:
    get:
      consumes:
      - application/json
      description: Recive all tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Tag'
      summary: List Tags
      tags:
      - tag
      - list
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
      security:
      - JWT: []
      summary: Create a new User
      tags:
      - user
      - create
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the user register
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - JWT: []
      summary: Delete User
      tags:
      - user
      - delete
    get:
      consumes:
      - application/json
      description: Recive the one user information from a id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.User'
      security:
      - JWT: []
      summary: Get a User
      tags:
      - user
      - get
    put:
      consumes:
      - application/json
      description: Update the user information
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.updateUserRequestData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
      security:
      - JWT: []
      summary: Update User
      tags:
      - user
      - update
  /users:
    get:
      consumes:
      - application/json
      description: Recive all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.ListUsersRow'
      security:
      - JWT: []
      summary: List Users
      tags:
      - user
      - list
securityDefinitions:
  JWT:
    in: header
    name: authorization
    type: apiKey
swagger: "2.0"
